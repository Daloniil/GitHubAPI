{"version":3,"sources":["Component/AllUsers/StyleUsers/Users.module.css","Component/User/StyleUser/User.module.css","API/API.ts","Component/AllUsers/Reposytory/Reposytory.tsx","users-selector.ts","Redux/users-reducer.ts","Component/AllUsers/Users.tsx","Types.ts","Component/User/User.tsx","App.tsx","reportWebVitals.ts","Redux/redux-store.ts","index.tsx"],"names":["module","exports","instance","axios","create","baseURL","GitHubAPI","name","get","then","res","data","repos","Reposytory","props","dispatch","useDispatch","useState","repo","stateRepo","load","setLoad","GitPes","useEffect","userLogin","a","public_repos","getUsersSelector","createSelector","state","userPage","users","getModeSelector","mode","getUserSelector","user","getReposytorysSelector","getReposytorySelector","initialState","actions","type","mod","getUser","items","Users","useSelector","value","setValue","className","s","content","onChange","e","target","input","placeholder","map","container","onClick","login","getReposytorys","src","avatar_url","alt","width","height","id","typeColors","User","color","getReposytory","followers","exit","profile","img","profile_info","email","location","created_at","style","fontWeight","following","bio","repos_info","repos_name","repos_stats","stats_forks","forks","stats_stars","stargazers_count","not_found","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","reducers","combineReducers","action","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunkMidleware","__store__","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.8da319a7.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"content\":\"Users_content__27IPi\",\"input\":\"Users_input__1DgkJ\",\"container\":\"Users_container__3kM5X\",\"name\":\"Users_name__2v9Ev\",\"repo\":\"Users_repo___lA9m\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"content\":\"User_content__2ANsS\",\"exit\":\"User_exit__3Ryc6\",\"profile\":\"User_profile__3MiXF\",\"profile_info\":\"User_profile_info__yLF6A\",\"bio\":\"User_bio__3T4NC\",\"input\":\"User_input__1Tb1B\",\"repos_info\":\"User_repos_info__2XK8G\",\"repos_name\":\"User_repos_name__ZKgEM\",\"repos_stats\":\"User_repos_stats__2M9V9\",\"stats_forks\":\"User_stats_forks__1Oe4Q\",\"stats_stars\":\"User_stats_stars__3lkG5\",\"not_found\":\"User_not_found__H-Kuc\"};","import axios from \"axios\";\nimport {UserReposytoryType, UsersType, UserType} from \"../Types\";\n\nexport const instance = axios.create({\n    baseURL: `https://api.github.com/`,\n});\n\n\nexport const GitHubAPI = {\n    getUsers(name: string) {\n        return instance.get<Array<UsersType>>(`search/users?q=${name}`).then(res => res.data)\n    },\n    getProfile(name: string) {\n        return instance.get<UserType>(`users/${name}`).then(res => res.data)\n    },\n    getReposytorys(name: string) {\n        return instance.get<Array<UserReposytoryType>>(`users/${name}/repos`).then(res => res.data)\n    },\n    getReposytory(name: string, repos: string) {\n        return instance.get<UserReposytoryType>(`repos/${name}/${repos}`).then(res => res.data)\n    },\n}","import React, {useEffect, useState} from \"react\";\nimport {useDispatch} from \"react-redux\";\nimport {instance} from \"../../../API/API\";\n\n\ntype Props = {\n    userLogin: string\n}\ntype ReposytoryLenghtType = {\n    public_repos: number\n}\n\nexport const Reposytory: React.FC<Props> = (props) => {\n    const dispatch = useDispatch()\n    const [repo, stateRepo] = useState({} as ReposytoryLenghtType)\n    const [load, setLoad] = useState(false)\n\n\n    const GitPes = {\n        getReposetors(name: string) {\n            return instance.get<ReposytoryLenghtType>(`users/${name}`).then(res => res.data)\n        },\n    }\n\n    const getReposytory = (name: string) => {\n        return async () => {\n            let data = await GitPes.getReposetors(name)\n            stateRepo(data)\n        }\n    }\n\n\n    useEffect(() => {\n        setLoad(true)\n        dispatch(getReposytory(props.userLogin))\n        setLoad(false)\n    }, [])\n\n    return (\n        <>\n            {load == false ? <>{!repo.public_repos ? 'ERROR' : ` Repo:  ${repo.public_repos}`} </> : <p>Loading...</p>}\n        </>\n    )\n}","import {createSelector} from \"reselect\";\nimport {AppStateType} from \"./Redux/redux-store\";\nimport {UserReposytoryType, UsersType, UserType} from \"./Types\";\n\nexport const getUsers = (state: AppStateType) => {\n    return state.userPage.users\n\n}\nexport const getUsersSelector = createSelector(getUsers, (users: Array<UsersType>) => {\n    return users\n})\n\nexport const getMode = (state: AppStateType) => {\n    return state.userPage.mode\n\n}\nexport const getModeSelector = createSelector(getMode, (mode: boolean) => {\n    return mode\n})\n\n\nexport const getUser = (state: AppStateType) => {\n    return state.userPage.user\n\n}\nexport const getUserSelector = createSelector(getUser, (user: UserType) => {\n    return user\n})\n\nexport const getReposytorys = (state: AppStateType) => {\n    return state.userPage.repos\n\n}\nexport const getReposytorysSelector = createSelector(getReposytorys, (repos: Array<UserReposytoryType>) => {\n    return repos\n})\n\nexport const getReposytory = (state: AppStateType) => {\n    return state.userPage.repo\n\n}\nexport const getReposytorySelector = createSelector(getReposytory, (repo: UserReposytoryType ) => {\n    return repo\n})\n\n\n\n\n","import {actionsType, BaseThunkType} from \"./redux-store\";\nimport {GitHubAPI} from \"../API/API\";\nimport {UserReposytoryType, UsersType, UserType} from \"../Types\";\n\nlet initialState = {\n    users: [] as Array<UsersType>,\n    user: {} as UserType,\n    repos: [] as Array<UserReposytoryType>,\n    repo: {} as UserReposytoryType,\n    mode: false as boolean\n\n};\n\nexport type initialStateType = typeof initialState\n\n\nexport const usersReducer = (state = initialState, action: ActionsTypes): initialStateType => {\n    switch (action.type) {\n        case \"GH/USER-REDUCER-TAKEUSERS\": {\n            return {\n                ...state,\n                users: action.users\n            }\n        }\n        case \"GH/USER-REDUCER-SETUSER\": {\n            return {\n                ...state,\n                user: action.user\n            }\n        }\n        case \"GH/USER-REDUCER-SETREPOS\": {\n            return {\n                ...state,\n                repos: action.repos\n            }\n        }\n        case \"GH/USER-REDUCER-SETREPO\": {\n            return {\n                ...state,\n                repo: action.repo\n            }\n        }\n        case 'GH/USER-REDUCER-SETMOD': {\n            return {\n                ...state,\n                mode: action.mod\n            }\n        }\n\n        default:\n            return state;\n    }\n}\n\ntype ActionsTypes = actionsType<typeof actions>\n\n\nexport const actions = {\n    setUsers: (users: Array<UsersType>) => {\n        return {\n            type: 'GH/USER-REDUCER-TAKEUSERS',\n            users\n        } as const\n    },\n    setUser: (user: UserType) => {\n        return {\n            type: 'GH/USER-REDUCER-SETUSER',\n            user\n        } as const\n    },\n    setReposytorys: (repos: Array<UserReposytoryType>) => {\n        return {\n            type: 'GH/USER-REDUCER-SETREPOS',\n            repos\n        } as const\n    },\n    setReposytory: (repo: UserReposytoryType) => {\n        return {\n            type: 'GH/USER-REDUCER-SETREPO',\n            repo\n        } as const\n    },\n    setMode: (mod: boolean) => {\n        return {\n            type: 'GH/USER-REDUCER-SETMOD',\n            mod\n        } as const\n    }\n\n}\n\n\ntype ThunkType = BaseThunkType<ActionsTypes>\n\n\nexport const getUser = (name: string): ThunkType => {\n    return async (dispatch) => {\n        let data = await GitHubAPI.getUsers(name)\n        dispatch(actions.setUsers(data.items))\n    }\n}\n\nexport const getProfile = (name: string): ThunkType => {\n    return async (dispatch) => {\n        dispatch(actions.setUser({} as UserType))\n        let data = await GitHubAPI.getProfile(name)\n        dispatch(actions.setUser(data))\n    }\n}\n\nexport const getReposytorys = (name: string): ThunkType => {\n    return async (dispatch) => {\n        let data = await GitHubAPI.getReposytorys(name)\n        dispatch(actions.setReposytorys(data))\n    }\n}\n\nexport const getReposytory = (name: string, repos: string): ThunkType => {\n    return async (dispatch) => {\n        dispatch(actions.setReposytory({} as UserReposytoryType))\n        let data = await GitHubAPI.getReposytory(name, repos)\n        dispatch(actions.setReposytory(data))\n    }\n}\n\n\n\n\n","import React, {useEffect, useState} from \"react\";\nimport {UsersType} from \"../../Types\";\nimport {Reposytory} from \"./Reposytory/Reposytory\";\nimport {getUsersSelector} from \"../../users-selector\";\nimport {actions, getProfile, getReposytorys, getUser} from \"../../Redux/users-reducer\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport s from './StyleUsers/Users.module.css'\n\nexport const Users: React.FC = () => {\n    const users = useSelector(getUsersSelector)\n    const dispatch = useDispatch()\n    const [value, setValue] = useState('')\n    const [load, setLoad] = useState(false)\n\n\n    useEffect(() => {\n        setLoad(true)\n        dispatch(getUser('A'))\n        setLoad(false)\n    }, [])\n\n    useEffect(() => {\n        dispatch(getUser(value))\n    }, [value])\n\n\n    return (\n        <div className={s.content}>\n            <input type=\"text\" onChange={e => setValue(e.target.value)} value={value} className={s.input}\n                   placeholder={\"Search for Users\"}/>\n            {load == false ?\n                users.map((users: UsersType) => {\n                        return (\n                            <div key={users.id} className={s.container} onClick={() => {\n                                dispatch(getProfile(users.login))\n                                dispatch(getReposytorys(users.login))\n                                dispatch(actions.setMode(true))\n                            }}>\n                                <div>\n                                    <img src={users.avatar_url} alt=\"\" width=\"75px\" height=\"75px\"/>\n                                </div>\n                                <div className={s.name}>\n                                    {users.login}\n                                </div>\n                                <div className={s.repo}>\n                                    <Reposytory userLogin={users.login}/>\n                                </div>\n                            </div>\n                        );\n                    }\n                ) :\n                <p>Loading...</p>}\n\n        </div>\n    )\n}\n","export type UsersType = {\n    login: string\n    id: number,\n    avatar_url: string,\n}\n\n\nexport type UserType = {\n    login: string\n    id: number,\n    avatar_url: string,\n    email: string | null,\n    location: string | null,\n    created_at: string,\n    followers: number,\n    following: number\n    bio: string\n}\n\n\nexport type UserReposytoryType = {\n    id: number,\n    name: string,\n    forks: number,\n    stargazers_count: number\n}\n\n\nexport const typeColors: any = {\n    '10': '#53a4cf',\n    '100': '#7b62a3',\n    '500': '#b97fc9',\n    '1000': '#fd7d24',\n    '2000': '#a4acaf',\n    '5000': '#729f3f',\n    '8000': '#f7de3f',\n    '10000': '#eed535',\n    '20000': '#FFFFF0',\n    '50000': '#eed535',\n    '100000': '#191970',\n    '500000': '#C71585',\n    '1000000': '#4B0082',\n\n}","import React, {useEffect, useState} from \"react\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {getReposytorySelector, getReposytorysSelector, getUserSelector} from \"../../users-selector\";\nimport {actions, getReposytory} from \"../../Redux/users-reducer\";\nimport {typeColors, UserReposytoryType} from \"../../Types\";\nimport s from './StyleUser/User.module.css'\n\n\nexport const User: React.FC = () => {\n    const user = useSelector(getUserSelector)\n    const repos = useSelector(getReposytorysSelector)\n    const repo = useSelector(getReposytorySelector)\n    const [value, setValue] = useState('')\n    const dispatch = useDispatch()\n\n    useEffect(() => {\n        dispatch(getReposytory(user.login, value))\n\n    }, [value])\n\n    let color: any\n    if (user.followers <= 10) {\n        color = \"10\"\n    } else if (user.followers <= 100 && user.followers > 10) {\n        color = \"100\"\n    } else if (user.followers <= 500 && user.followers > 100) {\n        color = \"500\"\n    } else if (user.followers <= 1000 && user.followers > 50) {\n        color = \"1000\"\n    } else if (user.followers <= 2000 && user.followers > 1000) {\n        color = \"2000\"\n    } else if (user.followers <= 5000 && user.followers > 2000) {\n        color = \"5000\"\n    } else if (user.followers <= 8000 && user.followers > 5000) {\n        color = \"8000\"\n    } else if (user.followers <= 10000 && user.followers > 8000) {\n        color = \"10000\"\n    } else if (user.followers <= 20000 && user.followers > 10000) {\n        color = \"20000\"\n    } else if (user.followers <= 50000 && user.followers > 20000) {\n        color = \"50000\"\n    } else if (user.followers <= 100000 && user.followers > 50000) {\n        color = \"100000\"\n    } else if (user.followers <= 500000 && user.followers > 100000) {\n        color = \"500000\"\n    } else if (user.followers <= 1000000 && user.followers > 500000) {\n        color = \"1000000\"\n    }\n\n\n    return (\n        <div className={s.content}>\n            <button className={s.exit} onClick={() => {\n                dispatch(actions.setMode(false))\n            }}>X\n            </button>\n            <div className={s.profile}>\n                <div className={s.img}>\n                    <img src={user.avatar_url} alt=\"\" width=\"150px\" height=\"150px\"/>\n                </div>\n                <div className={s.profile_info}>\n                    <p>{user.login}</p>\n                    <p>{user.email == null ? \"\" : `Email:${user.email}`}</p>\n                    <p> {user.location == null ? \"\" : `Location:${user.location}`}</p>\n                    <p>Join Date: {user.created_at}</p>\n                    <p style={{\n                        fontWeight: 800, color: typeColors[color]\n                    }}> {user.followers} Followers</p>\n                    <p>Following {user.following}</p>\n                </div>\n            </div>\n            <div className={s.bio}>\n                <p>{user.bio}</p>\n            </div>\n            <input type=\"text\" onChange={e => setValue(e.target.value)} value={value}\n                   placeholder={\"Search for Users's Repositories\"} className={s.input}/>\n            <div>\n                {value == '' ?\n                    repos.map((repos: UserReposytoryType) => {\n                            return (\n                                <div className={s.repos_info}>\n                                    <div className={s.repos_name}>\n                                        {repos.name}\n                                    </div>\n                                    <div className={s.repos_stats}>\n                                        <div className={s.stats_forks}>\n                                            {repos.forks} Forks\n                                        </div>\n                                        <div className={s.stats_stars}>\n                                            {repos.stargazers_count} Stars\n                                        </div>\n                                    </div>\n                                </div>\n\n                            );\n                        }\n                    ) :\n                    <div>\n                        {!repo.name ?\n                            <div className={s.not_found}>\n                                <p>NOT FOUND</p>\n                            </div> :\n                            <div className={s.repos_info}>\n                                <div className={s.repos_name}>\n                                    {!repo.name ? \"\" : repo.name}\n                                </div>\n                                <div className={s.repos_stats}>\n                                    <div className={s.stats_forks}>\n                                        {!repo.forks ? \"0\" : `${repo.forks} Forks`}\n                                    </div>\n                                    <div className={s.stats_stars}>\n                                        {!repo.stargazers_count ? \"0\" : `${repo.stargazers_count} Stars`}\n                                    </div>\n                                </div>\n                            </div>\n                        }\n                    </div>\n                }\n            </div>\n        </div>\n    )\n}","import React from 'react';\nimport {useSelector} from 'react-redux';\nimport './App.css';\nimport {Users} from \"./Component/AllUsers/Users\";\nimport {getModeSelector} from \"./users-selector\";\nimport {User} from \"./Component/User/User\";\n\nconst App: React.FC = () => {\n\n\n    const mode = useSelector(getModeSelector)\n\n    return (\n        <div className=\"App\">\n            <p>GitHub Search</p>\n\n            {mode == false ? <Users/> : <User/>}\n        </div>\n    );\n}\n\nexport default App;\n\n\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {Action, applyMiddleware, combineReducers, compose, createStore} from \"redux\";\nimport thunkMidleware, {ThunkAction} from \"redux-thunk\"\nimport {usersReducer} from \"./users-reducer\";\n\n\nlet reducers = combineReducers({\n    userPage: usersReducer\n});\n\n\ntype RootReducerType = typeof reducers\n\nexport type AppStateType = ReturnType<RootReducerType>\n\n\nexport type BaseThunkType<A extends Action, R = Promise<void>> = ThunkAction<R, AppStateType, unknown, A>\n\n\nexport  type actionsType<T> = T extends { [keys: string]: (...args: any[]) => infer U } ? U : never\n\n// @ts-ignore\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nconst store = createStore(reducers, composeEnhancers(applyMiddleware(thunkMidleware)));\n\n// @ts-ignore\nwindow.__store__ = store\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {Provider} from 'react-redux';\nimport store from \"./Redux/redux-store\";\n\nReactDOM.render(\n    <Provider store={store}>\n        <App/>\n    </Provider>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}